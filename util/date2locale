#!/usr/bin/env node

const { spawn } = require('child_process')

const fs = require('fs').promises

const name = process.argv[2] || "en_US"
const output = process.argv[3] || "locale"
const bash = spawn('bash')
bash.stdin.write(`
export TZ=UTC
locale=${name}
days=()
for i in {1..7}
do
    days+=($(LANG=$locale.UTF-8 date -d '2006-01-0'$i +'%a'))
done
echo \${days[*]}

days=()
for i in {1..7}
do
    days+=($(LANG=$locale.UTF-8 date -d '2006-01-0'$i +'%A'))
done
echo \${days[*]}

months=()
for i in {1..12}
do
    number=$(printf '%02d' $i)
    months+=($(LANG=$locale.UTF-8 date -d '2000-'$number-'01' +'%b'))
done
echo \${months[*]}

months=()
for i in {1..12}
do
    number=$(printf '%02d' $i)
    months+=($(LANG=$locale.UTF-8 date -d '2000-'$number-'01' +'%B'))
done
echo \${months[*]}

LANG=$locale.UTF-8 date -d '2000-09-03 08:05:04' +'%p'
LANG=$locale.UTF-8 date -d '2000-09-03 23:05:04' +'%p'
LANG=$locale.UTF-8 date -d '2000-09-03 08:05:04' +'%P'
LANG=$locale.UTF-8 date -d '2000-09-03 23:05:04' +'%P'
LANG=$locale.UTF-8 date -d 2000-09-03 +'%x'
LANG=$locale.UTF-8 date -d 2000-09-03 +'%x'
LANG=$locale.UTF-8 date -d '2000-09-03 08:05:04' +'%X'
LANG=$locale.UTF-8 date -d '2000-09-03 23:05:04' +'%X'
LANG=$locale.UTF-8 date -d '2000-09-03 08:05:04' +'%c'
LANG=$locale.UTF-8 date -d '2000-09-03 23:05:04' +'%c'
`)
bash.stdin.end()
const stdout = []
bash.stdout.on('data', chunk => stdout.push(chunk.toString()))
bash.on('exit', (code) => {
  if (code) {
    console.log({ code })
    process.exit(1)
  } else {
    const lines = stdout.join("").split(/\n/)
    console.log(lines)
    if (output == "locale") {
      for (const line of lines) {
        process.stdout.write(`// ${line}\n`)
      }
      const locale = { name, day: {}, month: {}, meridiem: [ "", "" ] }
      locale.day.abbrev = lines.shift().split(/\s+/)
      locale.day.full = lines.shift().split(/\s+/)
      locale.month.abbrev = lines.shift().split(/\s+/)
      locale.month.full = lines.shift().split(/\s+/)
      let [ am, pm ] = lines.splice(0, 2)
      console.log('!', lines, 'am', am, 'pm', pm)
      if (am && pm) {
        locale.meridiem[0] = am
        locale.meridiem[1] = pm
      }
      ;([ am, pm ] = lines.splice(0, 2))
      console.log('!', lines, 'am', am, 'pm', pm)
      if (am && pm) {
        console.log('>>>', am, pm, '|', locale.meridiem[0].toLowerCase())
        if (locale.meridiem[0].toLowerCase() != am) {
          throw new Error('nope')
        }
        if (locale.meridiem[1].toLowerCase() != pm) {
          throw new Error('nope')
        }
      }
      ;([ am, pm ] = lines.splice(0, 2))
      console.log('>>', am, pm)
      locale.date = createPattern(locale, am, pm)
      ;([ am, pm ] = lines.splice(0, 2))
      console.log('>>', am, pm)
      locale.time24 = createPattern(locale, am, pm)
      ;([ am, pm ] = lines.splice(0, 2))
      locale.dateTime = createPattern(locale, am, pm)
      process.stdout.write('module.exports = ')
      process.stdout.write(JSON.stringify(locale, null, 2))
      process.stdout.write(';\n')
    } else {
      shortDays = lines.shift().split(/\s+/)
      days = lines.shift().split(/\s+/)
      shortMonths = lines.shift().split(/\s+/)
      months = lines.shift().split(/\s+/)
      let [ AM, PM, am, pm ] = lines.splice(0, 4)
      let [ dateFormat ] = lines.splice(0, 2)
      let [ morningTimeFormat, eveningTimeFormat ] = lines.splice(0, 2)
      let [ morningDateTimeFormat, eveningDateTimeFormat ] = lines.splice(0, 2)
      console.log(dateFormat, eveningDateTimeFormat)
      try {
        fs.mkdirSync(`t/locale/${name}`, 0o755)
      } catch (e) {
        if (e.code != 'EEXIST') {
          throw e
        }
      }
      fs.writeFileSync('t/locale/${name}/days.t.js', `
      #!/usr/bin/env node
      require("proof")(14, function (okay) {
        const tz = require("timezone")(require("timezone/${name}"));
        // ${name} abbreviated days of week
        okay(tz("2006-01-01", "%a", "${name}"), "${shortDays[0]}", "Sun");
        okay(tz("2006-01-02", "%a", "${name}"), "${shortDays[1]}", "Mon");
        okay(tz("2006-01-03", "%a", "${name}"), "${shortDays[2]}", "Tue");
        okay(tz("2006-01-04", "%a", "${name}"), "${shortDays[3]}", "Wed");
        okay(tz("2006-01-05", "%a", "${name}"), "${shortDays[4]}", "Thu");
        okay(tz("2006-01-06", "%a", "${name}"), "${shortDays[5]}", "Fri");
        okay(tz("2006-01-07", "%a", "${name}"), "${shortDays[6]}", "Sat");

        // ${name} days of week
        okay(tz("2006-01-01", "%A", "${name}"), "${days[0]}", "Sunday");
        okay(tz("2006-01-02", "%A", "${name}"), "${days[1]}", "Monday");
        okay(tz("2006-01-03", "%A", "${name}"), "${days[2]}", "Tuesday");
        okay(tz("2006-01-04", "%A", "${name}"), "${days[3]}", "Wednesday");
        okay(tz("2006-01-05", "%A", "${name}"), "${days[4]}", "Thursday");
        okay(tz("2006-01-06", "%A", "${name}"), "${days[5]}", "Friday");
        okay(tz("2006-01-07", "%A", "${name}"), "${days[6]}", "Saturday");
      });

      `, 'utf8')
      fs.chmodSync(`t/locale/${name}/days.t.js`, 0o755)

      fs.writeFileSync(`t/locale/${name}/months.t.js`, `
      #!/usr/bin/env node
      require("proof")(24, function (equal) {
        const tz = require("timezone")(require("timezone/${name}"));
        //${name} abbreviated months
        equal(tz("2000-01-01", "%b", "${name}"), "${shortMonths[0]}", "Jan");
        equal(tz("2000-02-01", "%b", "${name}"), "${shortMonths[1]}", "Feb");
        equal(tz("2000-03-01", "%b", "${name}"), "${shortMonths[2]}", "Mar");
        equal(tz("2000-04-01", "%b", "${name}"), "${shortMonths[3]}", "Apr");
        equal(tz("2000-05-01", "%b", "${name}"), "${shortMonths[4]}", "May");
        equal(tz("2000-06-01", "%b", "${name}"), "${shortMonths[5]}", "Jun");
        equal(tz("2000-07-01", "%b", "${name}"), "${shortMonths[6]}", "Jul");
        equal(tz("2000-08-01", "%b", "${name}"), "${shortMonths[7]}", "Aug");
        equal(tz("2000-09-01", "%b", "${name}"), "${shortMonths[8]}", "Sep");
        equal(tz("2000-10-01", "%b", "${name}"), "${shortMonths[9]}", "Oct");
        equal(tz("2000-11-01", "%b", "${name}"), "${shortMonths[10]}", "Nov");
        equal(tz("2000-12-01", "%b", "${name}"), "${shortMonths[11]}", "Dec");

        // ${name} months
        equal(tz("2000-01-01", "%B", "${name}"), "${months[0]}", "January");
        equal(tz("2000-02-01", "%B", "${name}"), "${months[1]}", "February");
        equal(tz("2000-03-01", "%B", "${name}"), "${months[2]}", "March");
        equal(tz("2000-04-01", "%B", "${name}"), "${months[3]}", "April");
        equal(tz("2000-05-01", "%B", "${name}"), "${months[4]}", "May");
        equal(tz("2000-06-01", "%B", "${name}"), "${months[5]}", "June");
        equal(tz("2000-07-01", "%B", "${name}"), "${months[6]}", "July");
        equal(tz("2000-08-01", "%B", "${name}"), "${months[7]}", "August");
        equal(tz("2000-09-01", "%B", "${name}"), "${months[8]}", "September");
        equal(tz("2000-10-01", "%B", "${name}"), "${months[9]}", "October");
        equal(tz("2000-11-01", "%B", "${name}"), "${months[10]}", "November");
        equal(tz("2000-12-01", "%B", "${name}"), "${months[11]}", "December");
      });

      `, 'utf8')
      fs.chmodSync(`t/locale/${name}/months.t.js`, 0o755)

      fs.writeFileSync(`t/locale/${name}/formats.t.js`, `
      #!/usr/bin/env node
      require("proof")(5, function (equal) {
        var tz = require("timezone")(require("timezone/${name}"));
        // ${name} date representation
        equal(tz("2000-09-03", "%x", "${name}"), "${dateFormat}", "date format");

        // ${name} time representation
        equal(tz("2000-09-03 08:05:04", "%X", "${name}"), "${morningTimeFormat}", "long time format morning");
        equal(tz("2000-09-03 23:05:04", "%X", "${name}"), "${eveningTimeFormat}", "long time format evening");

        // ${name} date time representation
        equal(tz("2000-09-03 08:05:04", "%c", "${name}"), "${morningDateTimeFormat}", "long date format morning");
        equal(tz("2000-09-03 23:05:04", "%c", "${name}"), "${eveningDateTimeFormat}", "long date format evening");
      });

      `, 'utf8')
      fs.chmodSync(`t/locale/${name}/formats.t.js`, 0o755)

      if (am || AM || pm || PM) {
        fs.writeFileSync(`t/locale/${name}/meridiem.t.js`, `
        #!/usr/bin/env node
        require("proof")(4, function (equal) {
          var tz = require("timezone")(require("timezone/${name}"));
          // ${name} meridiem upper case
          equal(tz("2000-09-03 08:05:04", "%P", "${name}"), "${am}", "ante meridiem lower case");
          equal(tz("2000-09-03 23:05:04", "%P", "${name}"), "${pm}", "post meridiem lower case");

          // ${name} meridiem lower case
          equal(tz("2000-09-03 08:05:04", "%p", "${name}"), "${AM}", "ante meridiem upper case");
          equal(tz("2000-09-03 23:05:04", "%p", "${name}"), "${PM}", "post meridiem upper case");
        });

        `, 'utf8')
        fs.chmodSync(`t/locale/${name}/meridiem.t.js`, 0o755)
      }
    }
  }
})
let count = 0
function createPattern (locale, am, pm) {
    console.log(am, pm)
  am = am.replace("04", "%S")
  am = am.replace("05", "%M")
  let clock = /11/.test(pm) ? "I" : "H"
  am = am.replace("08", `%${clock}`)
  am = am.replace(/^ 8/, `%_${clock}`)
  am = am.replace("  8", ` %_${clock}`)
  am = am.replace(" 8", ` %-${clock}`)
  am = am.replace("03", "%d")
  am = am.replace("  3", " %_d")
  am = am.replace(" 3", " %-d")
  am = am.replace("09", "%m")
  am = am.replace("9", "%-m")
  am = am.replace("2000", "%Y")
  am = am.replace("00", "%y")
  am = am.replace("UTC", "%Z")
  am = am.replace(locale.meridiem[0], "%p")
  am = am.replace(locale.meridiem[0].toLowerCase(), "%P")
  am = am.replace(locale.day.abbrev[0], "%a")
  am = am.replace(locale.day.full[0], "%A")
  am = am.replace(locale.month.full[8], "%B")
  am = am.replace(locale.month.abbrev[8], "%b")
  return am
}
